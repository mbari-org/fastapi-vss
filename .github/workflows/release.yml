name: New Release

on:
  workflow_run:
    workflows: ["API Integration Test"]
    types:
      - completed
    branches:
      - main

jobs:
  semantic_release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11'

      - name: Set PYTHONPATH to subdirectory sdcat
        run: echo "PYTHONPATH=." >> $GITHUB_ENV

      - name: Check release status
        id: release-status
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          pip install python-semantic-release==8
          if semantic-release --noop --strict version
          then
            echo "Releasing new version."
          else
            echo "Skipping release steps."
          fi

      - if: steps.release-status.outputs.released == 'true'
        name: Release to GitHub with Changelog
        id: github-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          semantic-release version --changelog

      - name: docker push version
        if: steps.semantic.outputs.released == 'true'
        run: |
          export RELEASE_VERSION=$(echo ${{ steps.semantic.outputs.tag }} | cut -c 2-)
          docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
          docker buildx create --name mybuilder --platform linux/amd64,linux/arm64 --use
          docker buildx build --no-cache --sbom=true --provenance=true --push --platform linux/amd64,linux/arm64 -t mbari/fastapi-vss:$RELEASE_VERSION -t mbari/fastapi-vss:latest --build-arg IMAGE_URI=mbari/fastapi-vss:$RELEASE_VERSION -f Dockerfile .
          docker buildx build --no-cache --sbom=true --provenance=true --push --platform linux/amd64 -t mbari/fastapi-vss:$RELEASE_VERSION-cuda124 --build-arg IMAGE_URI=mbari/fastapi-vss:$RELEASE_VERSION-cuda124 -f Dockerfile.cuda .
